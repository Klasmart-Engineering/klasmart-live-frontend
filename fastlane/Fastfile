fastlane_require 'dotenv'
default_platform(:ios)

# Dotenv.overload('./fastlane/.env')
# Dotenv.load('./fastlane/.env.secret')
# Dotenv.load('./fastlane/.env.test')

# because default fastlane is_ci doesn't work on github actions
__is_ci = is_ci || "true" == "#{ENV['GITHUB_ACTIONS']}"
keychain_path = "#{ENV['MATCH_KEYCHAIN_PATH']}"

platform :ios do
  before_all do
    # # Delete possible leftover keychain file, otherwise creation of a new temporary keychain would fail
    # # Not needed if we can have a keychain file in the current working directory,
    # # because we always perform clean git checkout.
    # if File.exists?(keychain_path)
    #   puts("Deleting old keychain file: #{keychain_path}")
    #   delete_keychain(path: keychain_path)
    #   FileUtils.rm_f(keychain_path)
    # end
    # create_keychain(
    #   path: keychain_path,
    #   password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    #   default_keychain: true,
    #   unlock: true,
    #   timeout: 600,
    #   lock_when_sleeps: false,
    #   lock_after_timeout: false,
    #   require_create: true
    # )

    if __is_ci
      setup_ci
    end
    # (__is_ci) ? 
    # "#{ENV['APPSTORE_KEY_PRIVATE']}".gsub('\n', '\\n') :
    api_key = app_store_connect_api_key(
      key_id: "DW9C8JLCRK",
      issuer_id: "69a6de8d-4b17-47e3-e053-5b8c7c11a4d1",
      key_filepath: "./fastlane/AuthKey_DW9C8JLCRK.p8",
      duration: 1200,
      is_key_content_base64: true,
      in_house: false
    )
  end

  desc "Running prechecks"
  lane :check_metadata do
    precheck
  end
  
  desc "Alias for signing"
  lane :sign do
    signing
  end

  desc "Sync signing"
  lane :signing do
    check_metadata
    match(
      type: "adhoc" , 
      readonly: __is_ci,
      keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
      keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    )
    match(
      type: "appstore",
      readonly: __is_ci,
      keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
      keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    )
    mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    update_code_signing_settings(
      profile_name: mapping[ENV['MATCH_APP_IDENTIFIER']]
    )
  end

  desc "build ios app"
  lane :build do
    signing
    build_ios_app
  end

  desc "publish"
  lane :publish do
    build
    # upload_to_testflight(skip_waiting_for_build_processing: true)
    # upload_to_app_store # deliver
  end
end
