name: iOS starter workflow

on:
  push:
    branches: [ "ios-build" ]
  pull_request:
    branches: [ "ios-build" ]

jobs:
  codeScannigWithSemGrep:
    name: Scan
    runs-on: ubuntu-latest
    # Skip any PR created by dependabot to avoid permission issues
    if: (github.actor != 'dependabot[bot]')
    steps:
      # Fetch project source
      - uses: actions/checkout@v2
      # semgrep scan
      - uses: returntocorp/semgrep-action@v1
        with:
          config: >- # more at semgrep.dev/explore
            p/security-audit
            p/secrets
          generateSarif: "1"
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-scan
          path: semgrep.sarif
  fastlane:
    # needs: build
    name: ios app pipeline
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: 'true'
          submodules: 'recursive'
      - name: Cache gems
        uses: actions/cache@v3
        env:
          cache-name: cache-ruby-gems
        with:
          path: /usr/local/lib/ruby/gems/2.7.0/gems/
          key: ${{ env.cache-name }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: setup fastlane gems
        if: steps.ache-ruby-gems.outputs.cache-hit != 'true'
        run: |
          ruby --version
          gem install bundler:1.17.2
          bundle update --bundler
          bundle install
          bundle info bundler
          bundle info fastlane
          bundle info dotenv
          gem cleanup

      - name: fastlane stuff
        env:
          FASTLANE: 1
          FASTLANE_DISABLE_COLORS: 1
          SPACESHIP_SKIP_2FA_UPGRADE: 1
          LC_CTYPE: UTF-8
          FASTLANE_PASSWORD: ${{secrets.FASTLANE_PASSWORD}}
          MATCH_PASSWORD: ${{secrets.MATCH_PASSWORD}}
          MATCH_KEYCHAIN_PATH: "./ci.keychain"
          MATCH_KEYCHAIN_NAME: "cikeychain"
          MATCH_KEYCHAIN_PASSWORD: ${{secrets.MATCH_KEYCHAIN_PASSWORD}}
          PRIVATE_KEY: ${{ secrets.READONLY_SSH_PRIVATE_KEY }}
          SSH_KEYNAME: "readonly_pipeline_ed25519"

          APPSTORE_KEY_PRIVATE: ${{secrets.AUTHKEY_P8}}
        run: |
          echo "==KL============================="
          echo "set up Auth"
          echo ${APPSTORE_KEY_PRIVATE} > ./fastlane/AuthKey_DW9C8JLCRK.p8

          echo "==KL============================="
          echo "prechecks"
          bundle exec fastlane check_metadata --env development --verbose

          echo "==KL============================="
          echo "ssh magic(TM) workaround because fastlane's ruby decides it's convenient to forget how to read from the current repo"
          SSH_PATH="$HOME/.ssh"
          chmod 700 "$SSH_PATH"
          touch "$SSH_PATH/known_hosts"
          echo "$PRIVATE_KEY" > "$SSH_PATH/$SSH_KEYNAME"
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 "$SSH_PATH/known_hosts"
          chmod 600 "$SSH_PATH/$SSH_KEYNAME"
          eval $(ssh-agent)
          ssh-add "$SSH_PATH/$SSH_KEYNAME"

          echo "==KL============================="
          echo "disabling sensitive output"
          bundle exec fastlane run opt_out_usage

          echo "==KL============================="
          echo "signing certificates"
          bundle exec fastlane ios signing --env development --verbose

          echo "==KL============================="
          echo "building the app"
          bundle exec fastlane ios build --env development --verbose

          echo "==KL============================="
          echo "uploading to testflight/firebase/appStore"
          bundle exec fastlane ios publish --env development --verbose
  build:
    needs: [codeScannigWithSemGrep, fastlane]
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-11

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: 'true'
          submodules: 'recursive'
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          token: ${{ secrets.PACKAGES_TOKEN }}
          registry-url: https://npm.pkg.github.com/

      # - name: Cache gems
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-ruby-gems
      #   with:
      #     path: /usr/local/lib/ruby/gems/2.7.0/gems/
      #     key: ${{ env.cache-name }}-${{ hashFiles('**/Gemfile.lock') }}

      # - name: setup fastlane gems
      #   if: steps.ache-ruby-gems.outputs.cache-hit != 'true'
      #   run: |
      #     ruby --version
      #     gem install bundler:1.17.2
      #     bundle update --bundler
      #     bundle install
      #     bundle info bundler
      #     bundle info fastlane
      #     bundle info dotenv
      #     gem cleanup

      - name: Setup Cordova
        run: |
          sudo npm install -g cordova
          cordova telemetry off
      
      - name: Find node_modules cache
        id: cache-node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      # - name: Find node_modules cache
      #   id: cache-node_modules
      #   uses: actions/cache@v3
      #   with:
      #       path: ./node_modules
      #       key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      #       restore-keys: |
      #         ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      #         ${{ runner.os }}-
            
      - name: Install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: |
          sudo chown -R 501:20 "/Users/runner/.npm"
          npm ci --ignore-scripts
        env:
            NPM_GITHUB_TOKEN: ${{ secrets.PACKAGES_TOKEN }}

      - name: Prep iOS development
        env:
          ENDPOINT_GQL: "https://live.kidsloop.net/graphql"
          USE_TEST_TOKEN: 1
          WEBRTC_DEVICE_HANDLER_NAME: Safari12
          CUSTOM_UA: cordovaios
          IS_CORDOVA_BUILD: "true"
          NPM_GITHUB_TOKEN: ${{secrets.PACKAGES_TOKEN}}
        run: |
          npm run build:app
          ./scripts/parse-cordova-private-plugins.sh
          cordova prepare ios
          ./scripts/edit-ios-platform.sh

          xcodebuild -list -workspace ./platforms/ios/KidsLoop.xcworkspace
          xcodebuild -list -project ./platforms/ios/KidsLoop.xcodeproj

        # temporarily disable the full cordova emulator build
        # cordova build ios --buildFlag='-UseModernBuildSystem=0'
      

  # echo "==KL============================="
  # echo "Authenticating with Apple connect. Creates a valid cookie and FASTLANE_SESSION" 
  # eval $(bundle exec fastlane spaceauth -u build-machine@calmid.com 2>/dev/null | grep "export FASTLANE_SESSION")