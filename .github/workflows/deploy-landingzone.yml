name: Deploy to Landing Zone

concurrency:
    group: LandingZoneDeployment
    cancel-in-progress: true

on:
    release:
        types: [published]
    workflow_dispatch:

jobs:
    install:
        uses: KL-Engineering/github-action-workflows/.github/workflows/npm-ci.yml@v1.1.5
        secrets:
            NODE_AUTH_TOKEN: ${{ secrets.PACKAGES_TOKEN }}

    test-unit:
        needs: [install]
        uses: KL-Engineering/github-action-workflows/.github/workflows/npm-test-jest.yml@v1.1.5

    build:
        needs: [install]
        uses: KL-Engineering/github-action-workflows/.github/workflows/npm-build-upload-fe.yml@v2.0.3
        with:
            environment: landingzone
            region: uk
            upload: true

    package:
        needs: [build]
        name: Create deployable container
        runs-on: ubuntu-latest
        env:
            region: uk
            environment: landingzone
            ecr_repository: kidsloop-live-frontend

        steps:
            - uses: actions/checkout@v2
            - name: Download build
              uses: actions/download-artifact@v3
              with:
                  name: build-${{ env.region }}-${{ env.environment }}
                  path: deploy/dist

            - name: Add Version file
              run: jq "{\"Version\":\"$GITHUB_REF_NAME\",\"Commit\":\"$GITHUB_SHA\"}" --raw-output --null-input > deploy/dist/version.txt

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-2

            - name: Login to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build and Push Container
              run: |
                  set +x
                  export ENV_TAG=$(echo "${{ env.region }}-${{ env.environment }}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
                  export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
                  docker build -t $ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest -f deploy/Dockerfile deploy
                  docker tag $ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest
                  docker tag $ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-${GITHUB_SHA::7}
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-${GITHUB_SHA::7}
              env:
                  ECR_REGISTRY: 942095822719.dkr.ecr.eu-west-2.amazonaws.com
                  ECR_REPOSITORY: ${{ env.ecr_repository }}

    deploy-landing-zone:
        # Landing zone URL: hub.landing-zone.kidsloop.live
        environment: landing-zone
        runs-on: ubuntu-latest
        needs: [package]
        env:
            # Due to a Teleport bug, we are using K8 port forwarding to connect to ArgoCD for now.
            TOOLS_KUBECONFIG: "${{ github.workspace }}/.kube/tools-kubeconfig.yml"
            ARGOCD_SERVER: localhost:8080
            ARGOCD_OPTS: --grpc-web --insecure --plaintext
            ARGOCD_APP: uk-landingzone-live-frontend
            ARGOCD_APP_CHART_TAG_PATH: liveFrontend.tag
        name: Deploy to Landing Zone
        steps:
            # Set up the kubeconfig file in GHA secrets first
            - name: Set up kubernetes config file
              run: |
                  mkdir -p '${{ github.workspace }}/.kube' \
                  && echo '${{ secrets.TOOLS_KUBECONFIG_CONTENT_B64 }}' | base64 -d > $TOOLS_KUBECONFIG

            - name: Test kubernetes connection
              run: "kubectl version --kubeconfig $TOOLS_KUBECONFIG"

            - name: Configure ArgoCD CLI
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: version
                  options: --client

            - name: Set up kubernetes port-forwarding connection to tools cluster
              run: "kubectl port-forward -n argocd svc/argocd-server 8080:80 --kubeconfig $TOOLS_KUBECONFIG &"

            - name: Configure tags
              run: |
                  export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
                  export ENV_TAG="uk-landingzone"
                  export DEPLOY_TAG=$BRANCH_TAG-$ENV_TAG-${GITHUB_SHA::7}
                  echo "TAG    : ${TAG}"
                  echo "COMMIT : ${GITHUB_SHA::7}"
                  echo "IMAGE  : $DEPLOY_TAG"
                  echo "TAG=$TAG" >> $GITHUB_ENV
                  echo "DEPLOY_TAG=$DEPLOY_TAG" >> $GITHUB_ENV

            - name: Log into ArgoCD
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: login
                  options: >
                      '${{ env.ARGOCD_SERVER }}'
                      --username '${{ secrets.ARGOCD_AUTH_USERNAME }}'
                      --password '${{ secrets.ARGOCD_AUTH_PASSWORD }}'
                      ${{ env.ARGOCD_OPTS }}

            - name: Show ArgoCD app info
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: app
                  options: get ${{ env.ARGOCD_APP }}

            - name: Set ArgoCD app tag to build output
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: app
                  options: set ${{ env.ARGOCD_APP }} -p ${{ env.ARGOCD_APP_CHART_TAG_PATH }}=${{ env.DEPLOY_TAG }}

            - name: Sync the app now
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: app
                  options: sync ${{ env.ARGOCD_APP }} --timeout 300

            - name: Status - ArgoCD url
              if: always()
              uses: ouzi-dev/commit-status-updater@v1.1.0
              with:
                  status: "${{ job.status }}"
                  url: https://argocd.kidsloop.teleport.sh/applications/${{ env.ARGOCD_APP }}
                  description: "Click to view the app in ArgoCD"
                  name: "ArgoCD"

            - name: Status - target url
              if: always()
              uses: ouzi-dev/commit-status-updater@v1.1.0
              with:
                  status: "${{ job.status }}"
                  url: https://hub.landing-zone.kidsloop.live
                  description: "Click to test in the 'Landing Zone' environment"
                  name: "Landing Zone"
