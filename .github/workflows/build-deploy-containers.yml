name: container builds

concurrency:
  group: buildDeployContainers
  cancel-in-progress: false

on:
  # push:
  #   branches:
  #     - "feature/kidskube-refactor"
  release:
    types: [published]
  workflow_dispatch:

# Repository specific variables
env:
  ecr_repository: kidsloop-live-frontend
  argocd_app_chart_tag_path: liveFrontend.tag
  argocd_app_component: live-frontend

jobs:
  install:
    uses: KL-Engineering/github-action-workflows/.github/workflows/npm-ci.yml@v1.1.5
    secrets:
      NODE_AUTH_TOKEN: ${{ secrets.PACKAGES_TOKEN }}

  build-container:
    needs: [install]
    outputs:
      # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      # https://github.community/t/bug-jobs-output-should-return-a-list-for-a-matrix-job/128626/24
      # Outputs is a single string rather than a list/array.
      # This does not work for front end images that have unique image tags for each environment.
      # Each environment in the matrix will need its own output.
      # For environment-agnostic builds (like backend) it can be just:
      # image_version: ${{ steps.build-push.outputs.image_version}}
      uk-landingzone: ${{steps.set-output-image-version.outputs.uk-landingzone}}
      uk-prod: ${{steps.set-output-image-version.outputs.uk-prod}}
      id-beta: ${{steps.set-output-image-version.outputs.id-beta}}
      id-prod: ${{steps.set-output-image-version.outputs.id-prod}}
      th-prod: ${{steps.set-output-image-version.outputs.th-prod}}
      vn-alpha: ${{steps.set-output-image-version.outputs.vn-alpha}}
      vn-beta: ${{steps.set-output-image-version.outputs.vn-beta}}
      vn-loadtest: ${{steps.set-output-image-version.outputs.vn-loadtest}}
      vn-prod: ${{steps.set-output-image-version.outputs.vn-prod}}
      in-prod: ${{steps.set-output-image-version.outputs.in-prod}}
      lk-prod: ${{steps.set-output-image-version.outputs.lk-prod}}
      mb-uat: ${{steps.set-output-image-version.outputs.mb-uat}}
      pk-prod: ${{steps.set-output-image-version.outputs.pk-prod}}
      global-prod: ${{steps.set-output-image-version.outputs.global-prod}}
      global-alpha: ${{steps.set-output-image-version.outputs.global-alpha}}
      global-nextgen: ${{steps.set-output-image-version.outputs.global-nextgen}}
      global-showroom: ${{steps.set-output-image-version.outputs.global-showroom}}
      global-stage: ${{steps.set-output-image-version.outputs.global-stage}}
    strategy:
      matrix:
        include:
          - environment: landingzone
            region: uk
          - environment: prod
            region: uk
          - environment: beta
            region: id
          - environment: prod
            region: id
          - environment: prod
            region: th
          - environment: alpha
            region: vn
          - environment: beta
            region: vn
          - environment: loadtest
            region: vn
          - environment: prod
            region: vn
          - environment: prod
            region: in
          - environment: prod
            region: lk
          - environment: uat
            region: mb
          - environment: prod
            region: pk
          - environment: prod
            region: global
          - environment: alpha
            region: global
          - environment: nextgen
            region: global
          - environment: showroom
            region: global
          - environment: stage
            region: global
    name: build container
    runs-on: ubuntu-latest
    env:
      region: ${{ matrix.region }}
      environment: ${{ matrix.environment }}
    steps:
      - uses: KL-Engineering/github-action-workflows/.github/actions/npm-build-fe@v3.2.0
        with:
          environment: ${{ env.environment }}
          region: ${{ env.region }}
      - name: Add compiled files to the container deploy directory
        run: cp -r dist deploy/

      - name: Build and Push Container
        id: build-push
        uses: KL-Engineering/github-action-workflows/.github/actions/docker-build-push@v3.2.0
        with:
          image_name: ${{ env.ecr_repository }}
          dockerfile: deploy/Dockerfile
          docker_build_context: deploy
          platforms: linux/amd64,linux/arm64
          tags: |
            type=ref,event=tag,suffix=-${{ env.region }}-${{ env.environment }}
            type=ref,event=tag,suffix=-${{ env.region }}-${{ env.environment }}-{{sha}}
            type=ref,event=tag,suffix=-${{ env.region }}-${{ env.environment }}-latest
            type=ref,event=branch,suffix=-${{ env.region }}-${{ env.environment }}-{{sha}}
            type=ref,event=branch,suffix=-${{ env.region }}-${{ env.environment }}-latest
          ECR_AWS_ACCESS_KEY_ID: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          ECR_AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}

      - name: set-output-image-version
        id: set-output-image-version
        shell: bash
        run: |
          echo "Setting output: ${{ matrix.region }}-${{ matrix.environment }} to ${{ steps.build-push.outputs.image_version}}"
          echo '::set-output name=${{ matrix.region }}-${{ matrix.environment }}::${{ steps.build-push.outputs.image_version}}'

  deploy-ci:
    needs: [build-container]
    strategy:
      matrix:
        include:
          - environment: landingzone
            url: https://hub.landing-zone.kidsloop.live
            region: uk
    environment:
      url: ${{ matrix.url }}
      name: ${{ matrix.environment }}
    name: deploy
    runs-on: ubuntu-latest
    env:
      region: ${{ matrix.region }}
      environment: ${{ matrix.environment }}
    steps:
      - name: Extract image name
        id: image_version
        shell: bash
        run: |
          image_version=$(echo -E '${{ toJSON(needs.build-container.outputs) }}' | jq --raw-output '."${{ matrix.region }}-${{ matrix.environment }}"')
          echo "setting image_version to: ${image_version}"
          echo "::set-output name=image_version::${image_version}"

      - name: Deploy to ${{ matrix.environment }}
        uses: KL-Engineering/github-action-workflows/.github/actions/argocd-override-image-parameter@v3.2.0
        with:
          environment: ${{ env.environment }}
          region: ${{ env.region }}
          argocd_app: "${{ env.region }}-${{ env.environment }}-${{ env.argocd_app_component }}"
          argocd_app_chart_tag_path: ${{ env.argocd_app_chart_tag_path }}
          argocd_app_chart_tag_value: ${{ steps.image_version.outputs.image_version }}
          TOOLS_KUBECONFIG_CONTENT_B64: ${{ secrets.TOOLS_KUBECONFIG_CONTENT_B64 }}
          ARGOCD_AUTH_USERNAME: ${{ secrets.ARGOCD_AUTH_USERNAME }}
          ARGOCD_AUTH_PASSWORD: ${{ secrets.ARGOCD_AUTH_PASSWORD }}
